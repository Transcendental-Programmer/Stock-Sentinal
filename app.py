"""
Author : Priyansh Saxena
Dated : 21 December 2023

"""


import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State
from stock_prediction import *

colors = {
    'background': '#000000',  
    'text': '#FFFFFF',  
    'accent': '#FF0000'  
}

app = dash.Dash(
    title="Stock Sentinel",
    update_title='Predicting ...'
)
server = app.server

page_border_style = {
    'border': f'2px solid {colors["accent"]}',
    'padding': '20px',
    'margin': '20px',
    'borderRadius': '10px'
}

app.layout = html.Div(style={'backgroundColor': colors['background'], 'color': colors['text'], 'height': '100vh'}, children=[
    html.H1('Stock Sentinel', style={"textAlign": "center", "margin-top": "8px", "color": colors['accent']}),
    html.H2('Created By - Priyansh Saxena', style={"textAlign": "center", "margin-top": "8px", "color": colors['text']}),
    
    html.Div([
        dcc.Location(id='url', refresh=False),
        html.Div([
            dcc.Link('Basic Information', href='/basic-info', style={'margin-right': '10px', 'color': colors['accent'], 'textDecoration': 'none'}),
            dcc.Link('Model in Action', href='/model-action', style={'margin-right': '10px', 'color': colors['accent'], 'textDecoration': 'none'}),
        ], style={'display': 'flex', 'justifyContent': 'center', 'padding': '10px', 'backgroundColor': colors['background'], 'borderBottom': f'1px solid {colors["accent"]}'}),
    ], style={'paddingBottom': '20px'}),

    html.Div(id='page-content')
])

@app.callback(
    Output('page-content', 'children'),
    [Input('url', 'pathname')]
)
def display_page(pathname):
    if pathname == '/basic-info':
        return html.Div([
            html.P("This project is intended solely for educational purposes. All forecasts generated by the Machine Learning Model are purely probabilistic.", style={"textAlign": "center", "color": colors['text']}),
            html.H2("Instructions for usage:", style={"textAlign": "center", "color": colors['accent']}),
            html.Ol(children=[
                html.Li("The web application exclusively requires the TICKER name of the desired asset."),
                html.Li("Enter the ticker name of the desired stock or index and press enter."),
                html.Li("The initial plot showcases the outcomes derived from evaluating the model against historical data."),
                html.Li("The subsequent plot illustrates the future forecasts generated by the model.")
            ]),
            html.H2("Some other information", style={"textAlign": "center", "color": colors['accent']}),
            html.Ul(children=[
                html.Li("Model Used: Sequential LSTM Model"),
                html.Li("Lookbacks: 15"),
                html.Li("Epochs: 25"),
                html.Li("Forecast Duration: 1 Month")
            ])
        ], style=page_border_style)
    elif pathname == '/model-action':
        return html.Div([
            html.H1('Type a Stock Name & hit enter', style={'textAlign': 'center', 'color': colors['accent']}),
            dcc.Input(
                id='stock_name',
                type='text',
                debounce=True,
                placeholder="Type a stock name & hit enter",
                style={
                    "display": "block", "margin": "auto", "width": "60%", "color": colors['text'],
                    "backgroundColor": "#FFFFFF", "border": f"2px solid {colors['accent']}",
                    "padding": "8px", "fontSize": "16px", "outline": "none"
                }
            ),
            html.Div(id='r2_score', style={'textAlign': 'center', 'color': colors['text']}),
            html.Div([
                dcc.Graph(id="training_plot")
            ]),
            html.Div([
                html.H1('Stock Info Section', style={'textAlign': 'center', 'color': colors['accent']}),
                html.Div(id='stock_info', style={"textAlign": "justify", "padding": "32px", "color": colors['text']}),
            ]),
            html.H1('Future Price Prediction', style={'textAlign': 'center', 'color': colors['accent'], "margin": "0px"}),
            html.Div([
                dcc.Graph(id='future_plot')
            ], style={"margin": "0px"}),
        ], style=page_border_style)
    else:
        return html.Div([
            html.H1('Select one of the two options from the toolbar', style={'textAlign': 'center', 'color': colors['accent']})
        ], style=page_border_style)

def return_empty_graph():
    empty = {
        "layout": {
            "xaxis": {"visible": False},
            "yaxis": {"visible": False},
            "annotations": [
                {
                    "text": "No matching data found\nOr\nYou entered incorrect stock name...",
                    "xref": "paper",
                    "yref": "paper",
                    "showarrow": False,
                    "font": {"size": 28, "color": colors['text']}
                }
            ],
            'plot_bgcolor': colors['background'],
            "paper_bgcolor": colors['background'],
            "font_color": colors["text"]
        }
    }
    return empty

@app.callback(
    [Output('training_plot', 'figure'),
     Output('future_plot', 'figure'),
     Output('r2_score', 'children'),
     Output('stock_info', 'children')],
    [Input('stock_name', 'value')]
)
def update_graph(value):
    try:
        stock = value
        df, close_data, info = download_and_process_data(stock)
    except:
        empty = return_empty_graph()
        return empty, empty, "No R2 Score to display", "No Asset Queried or Selected"
    try:
        close_train, close_test, date_train, date_test = split_data(close_data, df)
        train_generator, test_generator = sequence_to_supervised(15, close_train, close_test)
        lstm_model = train_model(15, train_generator, 25)
        figure_1, r2_score = plot_train_test_graph(stock, lstm_model, test_generator, close_train, close_test, date_train, date_test)
        close_data, forecast, forecast_dates = predicting(close_data, lstm_model, 15, df)
        figure_2 = plot_future_prediction(lstm_model, test_generator, close_train, close_test, df, forecast_dates, forecast)
        r2_score = "R2 Score : {}".format(r2_score)
        return figure_1, figure_2, r2_score, info.info['longBusinessSummary']
    except:
        empty = return_empty_graph()
        return empty, empty, "No R2 Score to display", "No Asset Queried or Selected"

if __name__ == '__main__':
    app.run_server(debug=True)
